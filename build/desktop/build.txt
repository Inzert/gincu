set(TARGET gincu)
set(ROOT_PATH ${PROJECT_SOURCE_DIR}/../..)
set(BIN_PATH ${ROOT_PATH}/bin)
set(SRC_PATH ${ROOT_PATH}/src)
set(INCLUDE_PATH ${ROOT_PATH}/include)
set(TESTS_PATH ${ROOT_PATH}/tests)

set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${BIN_PATH})

set(LIBS )

if(GCC_LIKE)
	set(CMAKE_C_FLAGS -std=c99)

	set(SFML_LIBS
		${SFML_LIB_PATH}/libfreetype.a
		${SFML_LIB_PATH}/libvorbis.a
		optimized ${SFML_LIB_PATH}/libsfml-graphics.a
		optimized ${SFML_LIB_PATH}/libsfml-system.a
		optimized ${SFML_LIB_PATH}/libsfml-window.a
		debug ${SFML_LIB_PATH}/libsfml-graphics-d.a
		debug ${SFML_LIB_PATH}/libsfml-system-d.a
		debug ${SFML_LIB_PATH}/libsfml-window-d.a
	)

	set(ALLEGRO_LIBS
		${ALLEGRO_GCC_LIBS}
	)

else()

if(MSVC)
	set(SFML_LIBS
		${SFML_LIB_PATH}/freetype.lib
		${SFML_LIB_PATH}/vorbis.lib
		optimized ${SFML_LIB_PATH}/sfml-graphics.lib
		optimized ${SFML_LIB_PATH}/sfml-system.lib
		optimized ${SFML_LIB_PATH}/sfml-window.lib
		debug ${SFML_LIB_PATH}/sfml-graphics-d.lib
		debug ${SFML_LIB_PATH}/sfml-system-d.lib
		debug ${SFML_LIB_PATH}/sfml-window-d.lib
	)

	set(ALLEGRO_LIBS
		${ALLEGRO_VC_LIBS}
	)
endif()

endif()

if(GCC_LIKE)
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${GCC_OPTIMIZED_COMPILE_FLAGS}")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${GCC_DEBUG_COMPILE_FLAGS}")
	
	set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${GCC_OPTIMIZED_LINK_FLAGS}")
	set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${GCC_DEBUG_LINK_FLAGS}")

	set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} ${GCC_OPTIMIZED_LINK_FLAGS}")
	set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${GCC_DEBUG_LINK_FLAGS}")

	set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS_RELEASE} ${GCC_OPTIMIZED_LINK_FLAGS}")
	set(CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_STATIC_LINKER_FLAGS_DEBUG} ${GCC_DEBUG_LINK_FLAGS}")
endif()

if(MSVC)
	set(CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE} ${MSVC_OPTIMIZED_COMPILE_FLAGS}")
	set(CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} ${MSVC_DEBUG_COMPILE_FLAGS}")
	
	set(CMAKE_EXE_LINKER_FLAGS_RELEASE "${CMAKE_EXE_LINKER_FLAGS_RELEASE} ${MSVC_OPTIMIZED_LINK_FLAGS}")
	set(CMAKE_EXE_LINKER_FLAGS_DEBUG "${CMAKE_EXE_LINKER_FLAGS_DEBUG} ${MSVC_DEBUG_LINK_FLAGS}")

	set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "${CMAKE_SHARED_LINKER_FLAGS_RELEASE} ${MSVC_OPTIMIZED_LINK_FLAGS}")
	set(CMAKE_SHARED_LINKER_FLAGS_DEBUG "${CMAKE_SHARED_LINKER_FLAGS_DEBUG} ${MSVC_DEBUG_LINK_FLAGS}")

	set(CMAKE_STATIC_LINKER_FLAGS_RELEASE "${CMAKE_STATIC_LINKER_FLAGS_RELEASE} ${MSVC_OPTIMIZED_LINK_FLAGS}")
	set(CMAKE_STATIC_LINKER_FLAGS_DEBUG "${CMAKE_STATIC_LINKER_FLAGS_DEBUG} ${MSVC_DEBUG_LINK_FLAGS}")
endif()


macro(globAndAppendFiles fileList)
	set(globAndAppendFiles_patterns ${ARGN})
	file(GLOB temp ${globAndAppendFiles_patterns})
	list(APPEND ${fileList} ${temp})
endmacro()

globAndAppendFiles(fileList
	${SRC_PATH}/*.cpp
	${SRC_PATH}/ecs/*.cpp
	${SRC_PATH}/transition/*.cpp

	${ROOT_PATH}/thirdparty/*.cpp
	
	${TESTS_PATH}/application/*.cpp
	${TESTS_PATH}/application/matchthree/*.cpp
	${TESTS_PATH}/application/testbed/*.cpp
	${TESTS_PATH}/application/testbed/testcases/*.cpp
	${TESTS_PATH}/application/script/*.cpp
)

if(ENABLE_CPGF_REFLECTION)
globAndAppendFiles(fileList
	${SRC_PATH}/scripting/*.cpp
	${ROOT_PATH}/metagen/*.cpp

	# don't use cpgf tween meta data, use the one in Gincu.
	# ${CPGF_PATH}/src/metadata/tween/*.cpp
)
endif()

if(ENABLE_SFML)
	list(APPEND LIBS ${SFML_LIBS})
	include_directories(${SFML_INCLUDE_PATH})
	globAndAppendFiles(fileList ${SRC_PATH}/sfml/*.cpp)
endif()

if(ENABLE_ALLEGRO)
	list(APPEND LIBS ${ALLEGRO_LIBS} opengl32)
	include_directories(${ALLEGRO_INCLUDE_PATH})
	globAndAppendFiles(fileList	${SRC_PATH}/allegro/*.cpp)
endif()

add_executable(
	${TARGET}
	${fileList}
)

set_target_properties(
	${TARGET}
	PROPERTIES
	OUTPUT_NAME ${TARGET}
	RUNTIME_OUTPUT_DIRECTORY_DEBUG ${BIN_PATH}
	RUNTIME_OUTPUT_DIRECTORY_RELEASE ${BIN_PATH}
	RUNTIME_OUTPUT_DIRECTORY_MINSIZEREL ${BIN_PATH}
	RUNTIME_OUTPUT_DIRECTORY_RELWITHDEBINFO ${BIN_PATH}
	DEBUGGER_WORKING_DIRECTORY ${BIN_PATH}
)

include_directories(
	${INCLUDE_PATH}
	${TESTS_PATH}/application
	${CPGF_PATH}/include
	${ROOT_PATH}/thirdparty
	${ROOT_PATH}/thirdparty/eventpp/include
	${PYTHON_INC}
)

add_definitions(
	-DENABLE_LUA=${HAS_LUA}
	-DENABLE_V8=${HAS_V8}
	-DENABLE_PYTHON=${HAS_PYTHON}
	-DENABLE_SPIDERMONKEY=${HAS_SPIDERMONKEY}
)

target_link_libraries(${TARGET} ${CPGF_LIB} ${LIBS} ${LUA_LIB} ${PYTHON_LIB} )

